variables:
  agentsPool: 'Building pool'
  project: '**/Arbus.Network.csproj'
  testProject: 'Arbus.Network.UnitTests.csproj'
  nugetFeed: 'ArbusFeed'

stages:
  - stage: build
    displayName: Build
    pool:
      name:  $(agentsPool)
      demands:
        - agent.os -equals Windows_NT
    jobs:
      - job: build_job
        displayName: Build
        workspace:
          clean: outputs
        steps:
        - checkout: self
          fetchDepth: 1
        - task: DotNetCoreCLI@2
          displayName: 'Build $(project)'
          inputs:
            command: build
            projects: $(project)
            arguments: '-c Release -o $(Build.ArtifactStagingDirectory)/Binaries'
            outputDir: ''
        - task: DotNetCoreCLI@2
          displayName: 'Run $(testProject)'
          inputs:
            command: test
            projects: '**/$(testProject)'
            arguments: '-c Release -s src/tests.runsettings'
            testRunTitle: '$(Build.DefinitionName)_$(Build.SourceBranchName)_$(Build.BuildNumber)'
        - publish: $(Build.ArtifactStagingDirectory)
          displayName: 'Publish $(artifact)'

  - stage: deploy
    displayName: Deploy
    condition: and(succeeded(), not(eq(variables['Build.Reason'], 'PullRequest')))
    pool: 
      name: $(agentsPool)
    jobs:
      - job: pack
        displayName: Pack binaries
        workspace:
          clean: all
        steps:
          - checkout: self
            fetchDepth: 1
          - download: current
          - task: DotNetCoreCLI@2
            displayName: 'Pack $(project)'
            inputs:
              command: pack
              searchPatternPack: $(project)
              arguments: '--no-build'
              versioningScheme: byEnvVar
              versionEnvVar: Build.SourceBranchName
          - task: DotNetCoreCLI@2
            displayName: 'Push to $(nugetFeed)'
            inputs:
              command: push
              packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
              feedPublish: $(nugetFeed)